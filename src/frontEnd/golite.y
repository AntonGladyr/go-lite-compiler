/* The first section of a bison file contains:
 *    1. A code section for includes and other arbitrary C code. Copied to the parser verbatim
 *    2. Definition of the yylval union
 *    3. Definition of the tokens
 *    4. Precedence directives
 *    5. The start token
 *    6. Parser options
 */

/* Code section */
%{
#include <stdio.h>
#include <stdlib.h>

// Reference to the line number generated by the scanner
extern int yylineno;
// Reference to the yylex function to quiet a compiler warning
int yylex();

// The yyerror function is called on any syntax error. When using %error-verbose, this function
// takes a single argument (a string) which contains a detailed explanation of the error.
// Otherwise it takes no arguments and it is up to the user to format the error using a minimal
// description provided in yytext.
void yyerror(const char *s) {
	fprintf(stderr, "Error: (line %d) %s\n", yylineno, s);
	exit(1);
}
%}

/* The union directive defines the yylval union used for associating (a) terminals (tokens)
 * returned by flex with additional scanning data (such as identifier/constant values); and
 * optionally (b) non-terminals (variables in productions) with AST information if any.
 */
%union {
	int intval;
	char *identifier;
}

/* Token directives define the token types to be returned by the scanner (excluding character
 * tokens). Each token definition takes [optionally, a reference to the associated field in the
 * yylval union] and an identifier. Multiple tokens can eb defined per directive by using a list
 * of identifiers separated by spaces.
 */
%token tBREAK
%token tCASE
%token tCHAN
%token tCONST
%token tCONTINUE
%token tDEFAULT
%token tDEFER
%token tELSE
%token tFALLTHROUGH
%token tFOR
%token tFUNC
%token tGO
%token tGOTO
%token tIF
%token tIMPORT
%token tINTERFACE
%token tMAP
%token tPACKAGE
%token tRANGE
%token tRETURN
%token tSELECT
%token tSTRUCT
%token tSWITCH
%token tTYPE
%token tVAR
%token tPRINT
%token tPRINTLN
%token tAPPEND
%token tLEN
%token tCAP
%token tPLUS
%token tMINUS
%token tDIVIDE
%token tTIMES
%token tMODULO
%token tSINGLEAND
%token tSINGLEOR
%token tHAT
%token tRIGHTSHIFT
%token tLEFTSHIFT
%token tANDHAT
%token tPLUSASSIGN
%token tMINUSASSIGN
%token tTIMESASSIGN
%token tDIVIDEASSIGN
%token tMODULOASSIGN
%token tANDASSIGN
%token tORASSIGN
%token tHATASSIGN
%token tRIGHTSHIFTASSIGN
%token tLEFTSHIFTASSIGN
%token tANDHATASSIGN
%token tAND
%token tOR
%token tLESSMINUS
%token tPLUSPLUS
%token tMINUSMINUS
%token tEQUAL
%token tLESS
%token tGREATER
%token tNOT
%token tNOT_EQUAL
%token tLESS_THAN_OR_EQUAL
%token tGREATER_THAN_OR_EQUAL
%token tSTRONGASSIGN
%token tDOTDOTDOT
%token tLPAREN
%token tLCURL
%token tLSQUARE
%token tCOMMA
%token tDOT
%token tRPAREN
%token tRCURL
%token tRSQUARE
%token tSEMICOLON
%token tCOLON

/* Precedence directives resolve grammar ambiguities by breaking ties between shift/reduce
 * operations. Tokens are grouped into precendence levels, with lower precedence coming first
 * and then higher precedence in later directives. Tokens specified in the same directive have
 * the same precedence. Ties at the same level are broken using either %left or %right, which
 * denote left-associative and right-associative respectively.
 */
%left '+' '-'
%left '*' '/'

/* Start token (by default if this is missing it takes the first production */
%start exp

/* Generate the yylloc structure used for storing line numbers with tokens */
%locations
/* Generate detailed error messages */
%error-verbose

/* The second section of a bison file contains the productions. Note that rules with the
 * same LHS may be joined together and separated with a pipe.
 */
%% 

exp : tIDENTIFIER { printf("Load %s\n", $1); }
    | tINTVAL     { printf("Push %i\n", $1); }
    | exp '*' exp { printf("Mult\n"); }
    | exp '/' exp { printf("Div\n"); }
    | exp '+' exp { printf("Plus\n"); }
    | exp '-' exp { printf("Minus\n"); }
    | '(' exp ')' { }
    ;

%%
