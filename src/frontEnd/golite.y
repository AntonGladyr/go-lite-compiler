/* The first section of a bison file contains:
 *    1. A code section for includes and other arbitrary C code. Copied to the parser verbatim
 *    2. Definition of the yylval union
 *    3. Definition of the tokens
 *    4. Precedence directives
 *    5. The start token
 *    6. Parser options
 */

/* Code section */
%{
#include <stdio.h>
#include <stdlib.h>
#include <utility>
#include <string>
#include <vector>
#include "tree.h"
#include "Instruction.hpp"
#include "Statement.hpp"
#include "Declaration.hpp"
#include "ForStatement.hpp"
#include "AssignStatement.hpp"
#include "IfStatement.hpp"
#include "IfElseStatement.hpp"
#include "IncDecStatement.hpp"
#include "PrintStatement.hpp"
#include "SwitchStatement.hpp"


extern Instruction *rootIns;
// Reference to the line number generated by the scanner
extern int yylineno;
// Reference to the yylex function to quiet a compiler warning
int yylex();

// The yyerror function is called on any syntax error. When using %error-verbose, this function
// takes a single argument (a string) which contains a detailed explanation of the error.
// Otherwise it takes no arguments and it is up to the user to format the error using a minimal
// description provided in yytext.
void yyerror(const char *s) {
	fprintf(stderr, "Error: (line %d) %s\n", yylineno, s);
	exit(1);
}
%}

%code requires
{	
	#include "Instruction.hpp"
	#include "Declaration.hpp"
	#include "Statement.hpp"
	#include "Expression.hpp"
	#include "ForStatement.hpp"
	#include "AssignStatement.hpp"
	#include "IfStatement.hpp"
	#include "IfElseStatement.hpp"
	#include "IncDecStatement.hpp"
	#include "PrintStatement.hpp"
	#include "SwitchStatement.hpp"
	#include <vector>
}


/* The union directive defines the yylval union used for associating (a) terminals (tokens)
 * returned by flex with additional scanning data (such as identifier/constant values); and
 * optionally (b) non-terminals (variables in productions) with AST information if any.
 */
%union {
	int intval;
	char *identifier;
    	float floatval;
    	char runeval;
    	bool boolval;
    	char *stringval;

    	Instruction *ins;
	Declaration *decl;
	Statement *stmt;
	Expression *exp;
	
	ForStatement *forStmt;
	AssignStatement *assignStmt;
	IfStatement *ifStmt;
	IfElseStatement *ifElseStmt;
	IncDecStatement *incDecStmt;
	PrintStatement *printStmt;
	SwitchStatement *switchStmt;

	std::vector<Declaration*> *var_list;
    	std::vector<Expression*> *exp_list;
    	std::vector<std::string> *id_list;
    	std::vector<std::vector<std::string>> *structdecl_list;
    	std::vector<std::pair<Expression*, Instruction*>> *case_list;
	std::vector<std::vector<std::string>> *params_list;
}

/* Token directives define the token types to be returned by the scanner (excluding character
 * tokens). Each token definition takes [optionally, a reference to the associated field in the
 * yylval union] and an identifier. Multiple tokens can eb defined per directive by using a list
 * of identifiers separated by spaces.
 */

%type <ins> program
%type <decl> decl varspec 
%type <stmt> stmt ifstmt loopstmt assignstmt incdecstmt printstmt returnstmt switchstmt
%type <exp> exp

%type <var_list> varspecs
%type <params_list> params_list
%type <exp_list> exp_list
%type <id_list> id_list 
%type <structdecl_list> structdecl_list
%type <case_list> case_list

%token tBREAK
%token tCASE
%token tCONST
%token tCHAN
%token tCONTINUE
%token tDEFAULT
%token tDEFER
%token tELSE
%token tFALLTHROUGH
%token tFOR
%token tFUNC
%token tGO
%token tGOTO
%token tIF
%token tIMPORT
%token tINTERFACE
%token tMAP
%token tPACKAGE
%token tRANGE
%token tRETURN
%token tSELECT
%token tSTRUCT
%token tSWITCH
%token tTYPE
%token tVAR
%token tPRINT
%token tPRINTLN
%token tAPPEND
%token tLEN
%token tCAP
%token tPLUS
%token tMINUS
%token tDIV
%token tTIMES
%token tREM
%token tBWAND
%token tBWOR
%token tBWXOR
%token tRIGHTSHIFT
%token tLEFTSHIFT
%token tBWANDNOT
%token tPLUSASSIGN
%token tMINUSASSIGN
%token tMULTASSIGN
%token tDIVASSIGN
%token tREMASSIGN
%token tBWANDASSIGN
%token tBWORASSIGN
%token tBWXORASSIGN
%token tRSHIFTASSIGN
%token tLSHIFTASSIGN
%token tBWANDNOTASSIGN
%token tAND
%token tOR
%token tARROW
%token tINC
%token tDEC
%token tEQUAL
%token tLESS
%token tGREATER
%token tASSIGN
%token tBANG
%token tNOTEQ
%token tLESSEQ
%token tGREATEREQ
%token tSHORTDECLARE
%token tELLIPSIS
%token tLBRACE
%token tLPAREN
%token tLBRACKET
%token tCOMMA
%token tPERIOD
%token tRBRACE
%token tRPAREN
%token tRBRACKET
%token tSEMICOLON
%token tCOLON
%token <identifier> tIDENTIFIER
%token <intval> tINTVAL
%token <floatval> tFLOATVAL
%token <boolval> tBOOLVAL
%token <runeval> tRUNEVAL
%token <stringval> tSTRINGVAL
%token tNEWLINE

/* Precedence directives resolve grammar ambiguities by breaking ties between shift/reduce
 * operations. Tokens are grouped into precendence levels, with lower precedence coming first
 * and then higher precedence in later directives. Tokens specified in the same directive have
 * the same precedence. Ties at the same level are broken using either %left or %right, which
 * denote left-associative and right-associative respectively.
 */

%left tPLUS tMINUS tBWOR tBWXOR
%left tTIMES tDIV tREM tBWAND tBWANDNOT tLEFTSHIFT tRIGHTSHIFT
%left tEQUAL tNOTEQ tLESS tLESSEQ tGREATER tGREATEREQ
%left tAND
%left tOR
%left pMINUS pBANG pPLUS pBWXOR

/* Start token (by default if this is missing it takes the first production */
%start program

/* Generate the yylloc structure used for storing line numbers with tokens */
%locations
/* Generate detailed error messages */
%error-verbose

/* The second section of a bison file contains the productions. Note that rules with the
 * same LHS may be joined together and separated with a pipe.
 */
 //todo: unary binary literals expressions,
%%

program : tPACKAGE tIDENTIFIER tSEMICOLON top_level_decl_list { /*$$ = $3; */}
    ;

top_level_decl_list : decl
    | top_level_decl_list decl
    ;

decl : var_decl
    | type_decl
    | func_decl
    | %empty { $$ = NULL; }  
    ;

var_decl : tVAR id_listne type tSEMICOLON
    | tVAR id_listne tASSIGN exp_list tSEMICOLON
    | tVAR id_listne type tASSIGN exp_list tSEMICOLON 
    ;

type_decl : tTYPE tIDENTIFIER type tSEMICOLON { /*$$ = new TypeDeclaration($2, $3);*/ } 
    ;

func_decl : tFUNC tIDENTIFIER tLPAREN params tRPAREN block_stmt tSEMICOLON
    | tFUNC tIDENTIFIER tLPAREN params tRPAREN type block_stmt tSEMICOLON 
    ;

stmt_list : stmt 
    | stmt_list stmt
    ;
   
type : tIDENTIFIER
    | tLBRACKET tINTVAL tRBRACKET type
    | tLPAREN type tRPAREN
    ;

id_listne : tIDENTIFIER {/*$$ = new std::vector<std::string>(); $$->push_back($1);*/}
    | id_listne tCOMMA tIDENTIFIER {/*$1->push_back($3);*/}
    ;

id_listpe : %empty
    | id_listne
    ;

exp_list : 
    | exp {/*$$ = new std::vector<Expression*>(); $$->push_back($1);*/}
    | exp_list tCOMMA exp {/*$1->push_back($3);*/}
    ;

param : tIDENTIFIER type
    ;

params : param
    | params tCOMMA param
    | %empty
    ;

array_index : tLBRACKET exp tRBRACKET { }

array_index_list : array_index
    | array_index_list array_index
    ;

stmt : block_stmt tSEMICOLON { }
    | stmt_decl 
    | loopstmt tSEMICOLON
    | assignstmt tSEMICOLON
    | incdecstmt tSEMICOLON
    | ifstmt tSEMICOLON
    | printstmt tSEMICOLON
    | returnstmt tSEMICOLON
    | switchstmt tSEMICOLON
    | expstmt tSEMICOLON
    | tBREAK tSEMICOLON {/*$$ = new BreakStatement();*/}
    | tCONTINUE tSEMICOLON {/*$$ = new ContinueStatement();*/}
    | emptystmt tSEMICOLON { $$ = NULL; }
    ;

emptystmt : %empty
    ;

stmt_decl : var_decl
    | type_decl 
    ;

returnstmt : tRETURN {/*&$$ = new ReturnStatement();*/}
    | tRETURN exp {/*$$ = new ReturnStatement(exp);*/} 
    ;

expstmt : exp
    | %empty
    ;

loopstmt : tFOR simplestmt tSEMICOLON expstmt tSEMICOLON simplestmt block_stmt
    | tFOR exp block_stmt {/*$$ = new ForStatement($2, $4);*/}
    | tFOR block_stmt {/*$$ = new ForStatement($3);*/}
    ;

simplestmt : emptystmt
    | expstmt
    | incdecstmt
    | assignstmt
    ;

assignstmt : exp_list tASSIGN exp_list 
    ;

ifstmt : tIF exp block_stmt {/*$$ = new IfStatement($2, $4);*/} 
    | tIF exp block_stmt tELSE block_stmt {/*$$ = new IfElseStatement(k_stmtKindIfElse, $2, $4, $7);*/} 
    | tIF exp block_stmt tELSE ifstmt {/*$$ = new IfElseStatement(k_stmtKindIfElseNested, $2, $4, $8);*/} 
    ;

incdecstmt : exp tINC {/*$$ = new IncDecStatement(k_stmtKindInc, $$1);*/} 
    | exp tDEC {/*$$ = new IncDecStatement(k_stmtKindDec, $$1);*/}
    ;

printstmt : tPRINT tLPAREN exp_list tRPAREN {/*$$ = new PrintStatement(k_stmtKindPrint, $3);*/}
    | tPRINTLN tLPAREN exp_list tRPAREN {/*$$ = new PrintStatement(k_stmtKindPrintLn, $3);*/}
    ;

switchstmt : tSWITCH switch_body {/*$$ = new SwitchStatement($3);*/}
    | tSWITCH exp switch_body {/*$$ = new SwitchStatement($2, $4);*/} 
    ;

switch_body : tLBRACE case_list default tRBRACE
    | tLBRACE tRBRACE
    ;

case : tCASE exp_list tCOLON casestmt
    | %empty
    ;

casestmt : stmt_list
    | %empty
    ;

case_list : case
    | case_list case 
    ;

default : tDEFAULT tCOLON casestmt 
    ;

block_stmt: tLBRACE stmt_list tRBRACE
    | tLBRACE tRBRACE 
    ;

func_call : tIDENTIFIER tLPAREN id_listpe tRPAREN {/*$$ = new Binary(k_exprKindFunctionCall, $1, $3);*/}
    | tIDENTIFIER tLPAREN exp_list tRPAREN { } 
    | tLPAREN tIDENTIFIER tRPAREN tLPAREN exp_list tRPAREN
    ; 

exp : tIDENTIFIER { }
    | tLPAREN tIDENTIFIER tRPAREN 
    | tIDENTIFIER array_index_list {/*$$ = new Binary(k_exprKindIndexer, $1, $3);*/}
    | func_call
    | func_call array_index_list 
    | tLEN tLPAREN exp tRPAREN {/*$$ = new Binary(k_exprKindLen, $3);*/}
    | tCAP tLPAREN exp tRPAREN {/*$$ = new Binary(k_exprKindCap, $3);*/}
    | tLPAREN exp tRPAREN { } 
    | exp tPLUS exp {/*$$ = new Unary(k_exprKindPlus, $2);*/}
    | exp tMINUS exp {/*$$ = new Unary(k_exprKindMinus, $2);*/}
    | exp tTIMES exp { } 
    | exp tDIV exp { }
    | exp tREM exp { }
    | exp tBWAND exp { }
    | exp tBWOR exp { } 
    | exp tBWXOR exp {/*$$ = new Unary(k_exprKindBwxor, $2);*/}
    | exp tLEFTSHIFT exp { }
    | exp tRIGHTSHIFT exp { }
    | exp tBWANDNOT exp { }
    | exp tAND exp { } 
    | exp tOR exp { } 
    | exp tEQUAL exp { } 
    | exp tNOTEQ exp { } 
    | exp tGREATER exp { }
    | exp tLESS exp { } 
    | exp tGREATEREQ exp { } 
    | exp tLESSEQ exp { }
    | tINTVAL {/*$$ = new Literal(k_exprKindInt, $1);*/}
    | tFLOATVAL {/*$$ = new Literal(k_exprKindFloat, $1);*/}
    | tRUNEVAL {/*$$ = new Literal(k_exprKindChar, $1);*/}
    | tSTRINGVAL {/*$$ = new Literal(k_exprKindChar, $1);*/}
    | tBOOLVAL {/*$$ = new Literal(k_exprKindBool, $1);*/}
    | tIDENTIFIER {/*$$ = new Literal(k_exprKindIdentifier, $1);*/}
    | tBANG exp %prec pBANG {/*$$ = new Unary(k_exprKindBang, $2);*/}
    | tMINUS exp %prec pMINUS { }
    | tPLUS exp %prec pPLUS { }
    | tBWXOR exp %prec pBWXOR
    ; 

%%
